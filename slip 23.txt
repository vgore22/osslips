#Q1
#include<stdio.h>
#include<unistd.h>
int main() {
  pid_t pid;
  pid = fork();
  if(pid == 0) {
    //child process
    printf("Child process started id: %d\n" , getpid());
    int i; 
    for(i = 0 ; i < 5; i++) {
      sleep(1);
      printf("Child process running... \n");
    } 
    printf("\nChild process ended");
  } else {
    // parent process 
    printf("Parent process started\n");
    printf("Parent process ended\n"); 
  } 
} 



#Q2
/*
	Optimal Page Replacement Algorithm
*/
#include <stdio.h>
#include <stdlib.h>

int pointer;
int faults ,hits;

void display(int frame_size,int frame[])
{
	int i;
	printf("Frames:: ");
	for(i=0;i<frame_size;i++)
	{
		if(frame[i]==-1)
			printf("- ");
		else
			printf("%d ",frame[i]);
	}

	printf("\n");
}

int predict(int reference_length, int references[], int page_no ,int frame_size,int frame[], int start)
{
	int pos = -1, farthest = start, i;
	for(i=0;i<frame_size;i++)
	{
		int j;
		for(j=start;j<reference_length;j++)
		{
			if(frame[i]==references[j])
			{
				if(j>farthest)
				{
					farthest=j;
					pos=i;
				}
				break;
			}
		}
		if(j==page_no)
			return i;
	}
	if(pos == -1)
		return 0;
	else
		return pos;
}

void add_reference(int frame_size,int frame[], int reference, int current_position,int reference_length, int references[])
{
	int i;
	int allocated=0;
	for(i=0;i<frame_size;i++)
	{
		
		if(frame[i]==reference)
		{
			printf("  Hit for %d | ", reference);
			hits++;
			allocated = 1;
			break;
		}
		else if(frame[i]==-1)
		{
			frame[i] = reference;
			printf("Fault for %d | ", reference);
			faults++;
			allocated = 1;
			break;
		}
	}
	if(allocated==0)
	{
		int j = predict(reference_length,references,current_position,frame_size,frame,current_position+1);

		frame[j] = reference;
		printf("Fault for %d | ", reference);
		faults++;	
	}
	display(frame_size, frame);
}

int main()
{
	int frame_size,i,number_of_references;
	int frame[10];
	int reference[100];
	printf("Enter frame size: ");
	scanf("%d",&frame_size);
	
	for(i=0;i<frame_size;i++)
	{
		frame[i] = -1;
	}

	display(frame_size,frame);
	
	printf("Enter the number of references: ");
	scanf("%d",&number_of_references);
	printf("Enter the pages:\n");
	for(i=0;i<number_of_references;i++)
	{
		scanf("%d",&reference[i]);
		add_reference(frame_size,frame,reference[i],i,number_of_references,reference);
	}
	printf("\nNumber of faults: %d \nNumber of hits: %d\n",faults,hits );
}

--------OR----
#include <stdio.h>

int find(int frame[], int frameSize , int cur) {
	int i;
	for(i = 0; i < frameSize; i++) {
		if(cur == frame[i]) return 1;
	}
	return 0;
}

void display(int frame[] , int framesize , int hit) {
	int i;
	for(i = 0; i < framesize; i++) {
		printf("%2d | " , frame[i]);
	}
	if(hit == 1) printf("HIT\n");
	else printf("*\n");
}

int replace(int ref[] ,int n ,int frame[] ,int framesize ,int start) {
	int i;
	for(i = 0; i < framesize; i++) {
		if(frame[i] == -1) return i;
	}
	
	int j , rep = 0 , max = -999;
	for(i = 0; i < framesize; i++) {
		int cur = frame[i];
		for(j = start; j < n; j++) {
			if(cur == ref[j]) break;
		}
		if(j > max) {
			max = j;
			rep = i;
		}
	}
	return rep;
}

void opt(int ref[] , int framesize , int n) {
	int frame[framesize];
	int i;
	for(i = 0; i < framesize; i++) frame[i] = -1;
	int hit = 0 , pf = 0;
	
	for(i = 0; i < n; i++) {
		int cur = ref[i];
		if(find(frame , framesize , cur) == 0) {
			pf++;
			int rep = replace(ref , n , frame , framesize , i+1);
			frame[rep] = cur;
			display(frame , framesize , 0);
		} else {
			hit++;
			display(frame , framesize , 1);
		}
	}
}

int main() {
	int ref[] = {12,15,12, 18 , 6,8, 11 ,12 , 19 , 12, 6 , 8 , 12  ,15 , 19 , 8};
  	int frameSize = 3;
	int n = 16;
    opt(ref , frameSize , n);
    return 0;
}       
      