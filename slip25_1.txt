// parent.c
#include <stdio.h>
#include <stdlib.h>
#include <unistd.h>
#include <sys/wait.h>
#include <string.h>

// Bubble Sort function
void bubbleSort(int arr[], int n) {
    int temp;
    for (int i = 0; i < n-1; i++) {
        for (int j = 0; j < n-i-1; j++) {
            if (arr[j] > arr[j+1]) {
                // swap
                temp = arr[j];
                arr[j] = arr[j+1];
                arr[j+1] = temp;
            }
        }
    }
}

int main() {
    int n, key;

    printf("Enter number of elements: ");
    scanf("%d", &n);

    int arr[n];
    printf("Enter %d integers:\n", n);
    for (int i = 0; i < n; i++) {
        scanf("%d", &arr[i]);
    }

    printf("Enter the element to search: ");
    scanf("%d", &key);

    // Sort array
    bubbleSort(arr, n);

    // Fork a child
    pid_t pid = fork();

    if (pid < 0) {
        perror("Fork failed");
        exit(1);
    }

    else if (pid == 0) {
        // Prepare arguments for execve
        char *args[n + 3]; // n elements + program name + key + NULL

        args[0] = "./child"; // executable name

        // Convert array elements to strings
        for (int i = 0; i < n; i++) {
            args[i + 1] = malloc(16);
            sprintf(args[i + 1], "%d", arr[i]);
        }

        // Add search key
        args[n + 1] = malloc(16);
        sprintf(args[n + 1], "%d", key);

        args[n + 2] = NULL; // Null-terminated array

        // Set up environment (empty)
        char *envp[] = { NULL };

        // Execute child program
        execve("./child", args, envp);

        // If execve fails
        perror("execve failed");
        exit(1);
    }

    else {
        wait(NULL); // Parent waits
    }

    return 0;
}





// child.c
#include <stdio.h>
#include <stdlib.h>

// Binary Search function
int binarySearch(int arr[], int n, int key) {
    int low = 0, high = n - 1, mid;

    while (low <= high) {
        mid = (low + high)/2;
        if (arr[mid] == key)
            return mid;
        else if (arr[mid] < key)
            low = mid + 1;
        else
            high = mid - 1;
    }

    return -1; // Not found
}

int main(int argc, char *argv[]) {
    if (argc < 3) {
        printf("Insufficient arguments.\n");
        return 1;
    }

    int n = argc - 2; // Last argument is key
    int arr[n];

    // Convert string arguments to integers
    for (int i = 0; i < n; i++) {
        arr[i] = atoi(argv[i + 1]);
    }

    int key = atoi(argv[argc - 1]);

    // Perform binary search
    int result = binarySearch(arr, n, key);

    if (result == -1)
        printf("Element %d not found in array.\n", key);
    else
        printf("Element %d found at index %d (0-based).\n", key, result);

    return 0;
}
