#Q1
#include<stdio.h>
#include<stdbool.h>

bool find(int frame[] , int framesize , int cur) {
    int i;
    for(i = 0; i < framesize; i++) if(frame[i] == cur) return true;
    return false;
}

void display(int frame[] , int framesize , bool isHit) {
    int i;
    for(i = 0; i < framesize; i++) {
        printf("%2d | " , frame[i]);
    }
    if(isHit) {
        printf("HIT\n");
    } else {
        printf("*\n");
    }
}

int replace(int arr[] , int n , int frame[] , int framesize , int start) {
    int i;
    for(i = 0; i < framesize; i++) {
        if(frame[i] == -1) return i;
    }
    int j;
    int max = -999;
    int rep = 0;
    for(i = 0; i < framesize; i++) {
        int cur = frame[i];
        for(j = start; j >= 0; j--) {
            if(cur == arr[j]) break;
        }
        if(j > max) {
            max = j;
            rep = i;
        }
    }
    return rep;
}

void mru(int arr[] , int n , int framesize) {
    int frame[framesize];
    int i;
    int hit = 0;
    int pf = 0;
    for(i = 0; i < framesize; i++) frame[i] = -1;

    for(i = 0; i < n; i++) {
        int cur = arr[i];
        if(find(frame , framesize , cur) == false) {
            pf++;
            int rep = replace(arr , n , frame , framesize , i - 1);
            frame[rep] = cur;
            display(frame , framesize , false);
        } else {
            hit++;
            display(frame , framesize , true);
        }
    }
    printf("\n\nTotal HIT's: %d\nTotal PageFault: %d\n" , hit , pf);
}

int main() {
    int arr[] = {8,5,7,8,5,7,2,3,7,3,5,9,4,6,2};
    int n = 15;
    int framesize = 3;
    mru(arr , n , framesize);
}
--------OR-------
#include <stdio.h>
#include <stdlib.h>
#include<stdbool.h>

typedef struct Frame {
	int p , f , t;
} Frame;

void display(Frame frame[] , int framesize , bool isHit) {
	int i;
	for(i = 0; i < framesize; i++) {
		printf("%2d | " , frame[i].p);
	}
	if(isHit == true) printf(" HIT\n");
	else printf(" *\n");
}

bool find(Frame frame[] , int framesize, int cur) {
	int i = 0;
	for(i = 0; i < framesize; i++) {
		if(frame[i].p == cur) return true;
	}
	return false;
}

int replace(Frame frame[] , int framesize) {
	int i;
	for(i = 0; i < framesize; i++) if(frame[i].p == -1) return i;

	int rep = 0;
	for(i = 1; i < framesize; i++) {
		if(frame[i].f > frame[rep].f) {
			rep = i;
		} else if(frame[i].f == frame[rep].f) {
			if(frame[i].t < frame[rep].t) rep = i;
		}
	}
	return rep;
}

void mfu(int arr[] , int n ,int framesize) {
	Frame frame[framesize];
	int i;
	int hit = 0 , pf = 0; 
	int j;

	for(i = 0; i < framesize; i++) frame[i].p = -1 , frame[i].f = 0 , frame[i].t = 0;

	int rep = 0;
	for(i = 0; i < n; i++) {
		int cur = arr[i];
		if(find(frame , framesize , cur) == false) {
			pf++;
			rep = replace(frame , framesize);
			frame[rep].p = cur;
			frame[rep].f = 0;
			frame[rep].t = i;
			display(frame , framesize , false);
		} else {
			hit++;
            int x = 0;
            for(; x < framesize; x++) 
              if(frame[x].p == cur) 
                rep = x;
            frame[rep].f++;
            frame[rep].t = i;
			display(frame , framesize , true);
		}
	}
}

int main() {
	int arr[] = {3,4,5,4,3,4,7,2,4,5,6,7,2,4,6};
	int n = 15;
	int framesize = 3;
	mfu(arr , n , framesize);
}


#Q2
// Write a C  program to implement the toy shell. It should display the command prompt “myshell$”.
// Tokenize the command line and execute the given command by creating the child process.
// Additionally it should interpret the following commands.
// count c  filename  :- To print number of characters in the file.
// count w  filename   :- To print number of words in the file.
// count l   filename :- To print number of lines in the file.

#include <unistd.h>
#include <fcntl.h>
#include <stdio.h>
#include <string.h>
#include <sys/wait.h>

// seperate sentence: "count c filename" => count , c , filename
void make_toks(char *s, char *tok[])
{
  int i = 0;
  char *p;
  p = strtok(s, " ");
  while (p != NULL)
  {
    tok[i] = p;
    p = strtok(NULL, " ");
    i++;
  }
  tok[i] = NULL;
}

void count(char *fn, char op)
{
  int fh, cc = 0, wc = 0, lc = 0;
  char c;
  fh = open(fn, O_RDONLY);
  if (fh == -1)
  {
    printf("File %s not found.\n", fn);
    return;
  }

  while (read(fh, &c, 1) > 0)
  {
    if (c == ' ')
      wc++;
    else if (c == '\n')
    {
      wc++;
      lc++;
    }
    cc++;
  }

  close(fh);

  switch (op)
  {
  case 'c':
    printf("No.of characters: %d\n", cc);
    break;
  case 'w':
    printf("No.of words: %d\n", wc);
    break;
  case 'l':
    printf("No.of lines: %d\n", lc);
    break;
  }
}

int main()
{
  char buff[80], *args[10];
  int pid;
  int status;
  while (1)
  {
    printf("myshell$ ");
    fflush(stdin);
    fgets(buff, 80, stdin);
    buff[strlen(buff) - 1] = '\0';
    make_toks(buff, args);
    if (strcmp(args[0], "count") == 0)
      count(args[2], args[1][0]);
    else
    {
      pid = fork();
      if (pid > 0)
        wait(&status);
      else
      {
        if (execvp(args[0], args) == -1)
          printf("Bad command.\n");
      }
    }
  }
  return 0;
}

