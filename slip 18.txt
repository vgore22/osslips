#Q1
#include <stdio.h>
#include <stdlib.h>


int pointer;
int faults ,hits;

void display(int frame_size,int frame[])
{
	int i;
	printf("Frames:: ");
	for(i=0;i<frame_size;i++)
	{
		if(frame[i]==-1)
			printf("- ");
		else
			printf("%d ",frame[i]);
	}

	printf("\n");
}

int predict(int reference_length, int references[], int page_no ,int frame_size,int frame[], int start)
{
	int pos = -1, farthest = start, i;
	for(i=0;i<frame_size;i++)
	{
		int j;
		for(j=start-1;j>=0;j--)
		{
			if(frame[i]==references[j])
			{
				if(j<farthest)
				{
					farthest=j;
					pos=i;
				}
				break;
			}
		}
		if(j==page_no)
			return i;
	}
	if(pos == -1)
		return 0;
	else
		return pos;
}

void add_reference(int frame_size,int frame[], int reference, int current_position,int reference_length, int references[])
{
	int i;
	int allocated=0;
	for(i=0;i<frame_size;i++)
	{
		
		if(frame[i]==reference)
		{
			printf("  Hit for %d | ", reference);
			hits++;
			allocated = 1;
			break;
		}
		else if(frame[i]==-1)
		{
			frame[i] = reference;
			printf("Fault for %d | ", reference);
			faults++;
			allocated = 1;
			break;
		}
	}
	if(allocated==0)
	{
		int j = predict(reference_length,references,current_position,frame_size,frame,current_position+1);

		frame[j] = reference;
		printf("Fault for %d | ", reference);
		faults++;	
	}
	display(frame_size, frame);
}

int main()
{
	int frame_size,i,number_of_references;
	int frame[10];
	int reference[100];
	printf("Enter frame size: ");
	scanf("%d",&frame_size);
	
	for(i=0;i<frame_size;i++)
	{
		frame[i] = -1;
	}

	display(frame_size,frame);
	
	printf("Enter the number of references: ");
	scanf("%d",&number_of_references);
	
	
	for(i=0;i<number_of_references;i++)
	{
		scanf("%d",&reference[i]);
		add_reference(frame_size,frame,reference[i],i,number_of_references,reference);
	}
	printf("\nNumber of faults: %d \nNumber of hits: %d\n",faults,hits );
}

--------OR-------
#include<stdio.h>
#include<stdbool.h>

bool find(int frame[] , int framesize , int cur) {
    int i;
    for(i = 0; i < framesize; i++) if(frame[i] == cur) return true;
    return false;
}

void display(int frame[] , int framesize , bool isHit) {
    int i;
    for(i = 0; i < framesize; i++) {
        printf("%2d | " , frame[i]);
    }
    if(isHit) {
        printf("HIT\n");
    } else {
        printf("*\n");
    }
}

int replace(int arr[] , int n , int frame[] , int framesize , int start) {
    int i;
    for(i = 0; i < framesize; i++) {
        if(frame[i] == -1) return i;
    }
    int j;
    int max = 999;
    int rep = 0;
    for(i = 0; i < framesize; i++) {
        int cur = frame[i];
        for(j = start; j >= 0; j--) {
            if(cur == arr[j]) break;
        }
        if(j < max) {
            max = j;
            rep = i;
        }
    }
    return rep;
}

void lru(int arr[] , int n , int framesize) {
    int frame[framesize];
    int i;
    int hit = 0;
    int pf = 0;
    for(i = 0; i < framesize; i++) frame[i] = -1;

    for(i = 0; i < n; i++) {
        int cur = arr[i];
        if(find(frame , framesize , cur) == false) {
            pf++;
            int rep = replace(arr , n , frame , framesize , i - 1);
            frame[rep] = cur;
            display(frame , framesize , false);
        } else {
            hit++;
            display(frame , framesize , true);
        }
    }
    printf("\n\nTotal HIT's: %d\nTotal PageFault: %d\n" , hit , pf);
}

int main() {
    int arr[] = {8,5,7,8,5,7,2,3,7,3,5,9,4,6,2};
    int n = 15;
    int framesize = 3;
    lru(arr , n , framesize);
}

#Q2
#include <stdio.h>
#include <stdlib.h>

typedef struct process
{
  int id, at, bt, wt, tat, ct;
} process;

void sort(process pro[], int n)
{
  process temp;
  for (int i = 0; i < n; i++)
    for (int j = 0; j < n - i - 1; j++)
      if (pro[j].at > pro[j + 1].at)
      {
        temp = pro[j];
        pro[j] = pro[j+1];
        pro[j+1] = temp;
      }
}

void display(process pro[], int n)
{
  printf("\n");
  for (int i = 0; i < n; i++)
    printf("P%d AT: %d BT: %d CT: %d TAT: %d WT: %d\n",
           pro[i].id,
           pro[i].at,
           pro[i].bt,
           pro[i].ct,
           pro[i].tat,
           pro[i].wt);
}

void fcfsScheduling(process pro[], int n)
{
  sort(pro, n);
  pro[0].ct = pro[0].bt + pro[0].at;
  pro[0].tat = pro[0].ct - pro[0].at;
  pro[0].wt = pro[0].tat - pro[0].bt;

  int time = pro[0].ct;

  int sumw = 0, sumt = 0;

  for (int i = 1; i < n; i++)
  {
    time += pro[i].bt;
    pro[i].ct = time;
    pro[i].tat = pro[i].ct - pro[i].at;
    pro[i].wt = pro[i].tat - pro[i].bt;
    sumw += pro[i].wt;
    sumt += pro[i].tat;
  }

  display(pro, n);

  printf("\nAvg wating time: %f\nAvg turn around time: %f\n", (sumw * 1.0) / n, (sumt * 1.0) / n);
}

int main()
{
  int n;
  printf("Enter the number of processes: ");
  scanf(" %d", &n);
  struct process pro[n];

  for (int i = 0; i < n; i++)
  {
    pro[i].id = i + 1;
    printf("Arrival time for P%d: ", pro[i].id);
    scanf(" %d", &pro[i].at);

    printf("Burst time for P%d: ", pro[i].id);
    scanf(" %d", &pro[i].bt);
    
    pro[i].wt = pro[i].tat = pro[i].ct = 0;
    printf("\n");
  }

  printf("FCFS Scheduling:\n");
  fcfsScheduling(pro, n);
  return 0;
}