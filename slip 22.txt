#Q1
#include <stdio.h>
#include <unistd.h>
#include <sys/resource.h>
int main() {
  pid_t pid;
  int retnice;
  pid = fork();
  while(1) {
    if (pid == 0) {
      retnice = nice(-5);
      printf("I am Child Process ID: %d Priority: %d\n", getpid() , retnice);
      sleep(1);         
    } else { 
      retnice = nice(10); 
      printf("I am Parent Process ID: %d Priority: %d\n", getpid() , retnice);
      sleep(1);         
      printf("---------\n");
    }           
  }     
}



#Q2
#include <stdio.h>
#include <stdlib.h>

typedef struct process {
	int id , at , bt,p,  rt , ct , tat , wt;
} process;

/*
4 1 5 1 0 6 2 1 2 1 0 4 3
*/

void display(process proc[] , int n) {
	int i = 0;
	printf("\nP   AT BT P  CT TAT WT\n");
	for(; i < n; i++) {
		printf("P%d %2d %2d %2d %2d %2d %2d\n" , 
			proc[i].id,
			proc[i].at,
			proc[i].bt,
			proc[i].p,
			proc[i].ct,
			proc[i].tat,
			proc[i].wt
		);
	}
}

// low no low p 
void nonPreemptivePriority(process proc[] ,int n) {
	int i , j;
	int k = 1;
	process temp;
	int totalbt = 0; 

	for(j = 0; j < n; j++) {
		int cur = k;
		for(i = k; i < n; i++) {
			if(proc[i].at <= totalbt) {
				if(proc[i].p > proc[cur].p) {
					totalbt+=proc[i].bt;
					cur = i;
				}
			}
		}
		if(cur == k) continue;
		temp = proc[cur];
		proc[cur] = proc[j];
		proc[j] = temp;
		k++;
	}
	proc[0].ct = proc[0].bt;
	totalbt = proc[0].bt;
	for(i = 1; i < n; i++) {
		totalbt += proc[i].bt;
		proc[i].ct = totalbt;
	}
	int ttat = 0;
	int twt = 0;
	for(i = 0; i < n; i++) {
		proc[i].tat = proc[i].ct - proc[i].at;
		proc[i].wt = proc[i].tat - proc[i].bt;
		ttat += proc[i].tat;
		twt += proc[i].wt;
	}
	display(proc , n);
	printf("\nAvg TAT: %0.2f\nAvg WT: %0.2f\n" , (ttat * 1.0) / n , (twt * 1.0) / n);
}

int main() {
	int n = 4; 
	printf("Enter number of processes: ");
	scanf(" %d" , &n);
	process proc[n];
	int i = 0;
	for(i = 0; i < n; i++) {
		proc[i].id = i+1;
		printf("\nFor P%d\n" , i+1);
		printf("Enter AT: ");
		scanf(" %d" , &proc[i].at);
		printf("Enter BT: ");
		scanf(" %d" , &proc[i].bt);
		printf("Enter P: ");
		scanf(" %d" , &proc[i].p);
		proc[i].rt = proc[i].bt;
		proc[i].ct = proc[i].tat = proc[i].wt = 0;
	}
	nonPreemptivePriority(proc , n);
}


/*
INPUT:
4 0 4 1 1 2 2 2 1 3 3 6 4
*/
