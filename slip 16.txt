#Q1
// Write a C  program to implement the toy shell. It should display the command prompt “myshell$”.
// Tokenize the command line and execute the given command by creating the child process.
// Additionally it should interpret the following commands.
// count c  filename  :- To print number of characters in the file.
// count w  filename   :- To print number of words in the file.
// count l   filename :- To print number of lines in the file.

#include <unistd.h>
#include <fcntl.h>
#include <stdio.h>
#include <string.h>
#include <sys/wait.h>

// seperate sentence: "count c filename" => count , c , filename
void make_toks(char *s, char *tok[])
{
  int i = 0;
  char *p;
  p = strtok(s, " ");
  while (p != NULL)
  {
    tok[i] = p;
    p = strtok(NULL, " ");
    i++;
  }
  tok[i] = NULL;
}

void count(char *fn, char op)
{
  int fh, cc = 0, wc = 0, lc = 0;
  char c;
  fh = open(fn, O_RDONLY);
  if (fh == -1)
  {
    printf("File %s not found.\n", fn);
    return;
  }

  while (read(fh, &c, 1) > 0)
  {
    if (c == ' ')
      wc++;
    else if (c == '\n')
    {
      wc++;
      lc++;
    }
    cc++;
  }

  close(fh);

  switch (op)
  {
  case 'c':
    printf("No.of characters: %d\n", cc);
    break;
  case 'w':
    printf("No.of words: %d\n", wc);
    break;
  case 'l':
    printf("No.of lines: %d\n", lc);
    break;
  }
}

int main()
{
  char buff[80], *args[10];
  int pid;
  int status;
  while (1)
  {
    printf("myshell$ ");
    fflush(stdin);
    fgets(buff, 80, stdin);
    buff[strlen(buff) - 1] = '\0';
    make_toks(buff, args);
    if (strcmp(args[0], "count") == 0)
      count(args[2], args[1][0]);
    else
    {
      pid = fork();
      if (pid > 0)
        wait(&status);
      else
      {
        if (execvp(args[0], args) == -1)
          printf("Bad command.\n");
      }
    }
  }
  return 0;
}


#Q2
#include <stdio.h>
#include <stdlib.h>

typedef struct process {
	int id , at , bt,p,  rt , ct , tat , wt;
} process;

/*
4 1 5 1 0 6 2 1 2 1 0 4 3
*/

void display(process proc[] , int n) {
	int i = 0;
	printf("\nP   AT BT P  CT TAT WT\n");
	for(; i < n; i++) {
		printf("P%d %2d %2d %2d %2d %2d %2d\n" , 
			proc[i].id,
			proc[i].at,
			proc[i].bt,
			proc[i].p,
			proc[i].ct,
			proc[i].tat,
			proc[i].wt
		);
	}
}

// low no low p 
void nonPreemptivePriority(process proc[] ,int n) {
	int i , j;
	int k = 1;
	process temp;
	int totalbt = 0; 

	for(j = 0; j < n; j++) {
		int cur = k;
		for(i = k; i < n; i++) {
			if(proc[i].at <= totalbt) {
				if(proc[i].p > proc[cur].p) {
					totalbt+=proc[i].bt;
					cur = i;
				}
			}
		}
		if(cur == k) continue;
		temp = proc[cur];
		proc[cur] = proc[j];
		proc[j] = temp;
		k++;
	}
	proc[0].ct = proc[0].bt;
	totalbt = proc[0].bt;
	for(i = 1; i < n; i++) {
		totalbt += proc[i].bt;
		proc[i].ct = totalbt;
	}
	int ttat = 0;
	int twt = 0;
	for(i = 0; i < n; i++) {
		proc[i].tat = proc[i].ct - proc[i].at;
		proc[i].wt = proc[i].tat - proc[i].bt;
		ttat += proc[i].tat;
		twt += proc[i].wt;
	}
	display(proc , n);
	printf("\nAvg TAT: %0.2f\nAvg WT: %0.2f\n" , (ttat * 1.0) / n , (twt * 1.0) / n);
}

int main() {
	int n = 4; 
	printf("Enter number of processes: ");
	scanf(" %d" , &n);
	process proc[n];
	int i = 0;
	for(i = 0; i < n; i++) {
		proc[i].id = i+1;
		printf("\nFor P%d\n" , i+1);
		printf("Enter AT: ");
		scanf(" %d" , &proc[i].at);
		printf("Enter BT: ");
		scanf(" %d" , &proc[i].bt);
		printf("Enter P: ");
		scanf(" %d" , &proc[i].p);
		proc[i].rt = proc[i].bt;
		proc[i].ct = proc[i].tat = proc[i].wt = 0;
	}
	nonPreemptivePriority(proc , n);
}


/*
INPUT:
4 0 4 1 1 2 2 2 1 3 3 6 4
*/
