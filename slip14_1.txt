#include <stdio.h>
#include <stdlib.h>
#include <string.h>
#include <unistd.h>
#include <sys/wait.h>
#define MAX_INPUT 100
#define MAX_ARGS 10
// Function to print first 'n' lines from the file void typeline_n(const char *filename, int n) {
    FILE *file = fopen(filename, "r");
char line[256]; int count = 0;
if (file == NULL) {
perror("Error opening file"); return;
    }
// Read and print the first 'n' lines from the file while (fgets(line, sizeof(line), file) && count < n) {
printf("%s", line);
        count++;
    }
fclose(file);
}
int main() {
char input[MAX_INPUT]; char *args[MAX_ARGS]; char *token;
while (1) { // Display the prompt printf("myshell$ "); // Get input from the user fgets(input, sizeof(input), stdin); // Remove newline character from the input input[strcspn(input, "\n")] = 0;
// Tokenize the input int i = 0;
        token = strtok(input, " ");
while (token != NULL && i < MAX_ARGS - 1) {
args[i++] = token;
            token = strtok(NULL, " ");
        }
args[i] = NULL;
// If no input is given, continue if (args[0] == NULL) continue;
// Exit command
if (strcmp(args[0], "exit") == 0) {
break;
        }
// Custom 'typeline' command implementation if (strcmp(args[0], "typeline") == 0) {
if (args[1] != NULL && args[1][0] == '+' && args[2] != NULL) { int n = atoi(&args[1][1]);  // Extract number from +n typeline_n(args[2], n);     // Call function to print first 'n'
lines
            } else {
printf("Usage: typeline +n filename\n");
            }
continue;
        }
// Fork a child process to execute other commands pid_t pid = fork(); if (pid == 0) {  // Child process
if (execvp(args[0], args) == -1) {
perror("Error executing command");
            }
exit(EXIT_FAILURE);
        } else if (pid > 0) {  // Parent process wait(NULL);  // Wait for the child process to complete
        } else {
perror("Fork failed");
        }
    }
return 0;
}
