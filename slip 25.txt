#Q1
#include<stdio.h>
#include<stdlib.h>
#include<unistd.h>
void bubbleSort(int arr[],int n)
{
    int temp,i,j;
    for(i=0;i<n-1;i++)
    {
        for(j=0;j<n-1;j++)
        {
        if(arr[j]>arr[j+1])
        {
            temp=arr[j];
            arr[j]=arr[j+1];
            arr[j+1]=temp;
        }
        }
     }
}
void insertionSort(int arr[],int n)
{
     int i,key,j;
     for(i=1;i<n;i++)
     {
         key=arr[i];
         j=i-1;
         while(j>=0 && arr[j]>key)
         {
             arr[j+1]=arr[j];
              j=j-1;
         }
         arr[j+1]=key;
      }
}
int main()
{
   int n,i;
   printf("Enter the number of integers to sort:");
   scanf("%d",&n);
   int arr[n];
   printf("Enter %d integers\n",n);
   for(i=0;i<n;i++)
   scanf("5d",&arr[i]);
   pid_t pid=fork();
   if(pid<0)
   {
        printf("Fork failed.Unable to create a child process\n");
        return 1;
   }
   else if(pid==0)
   {
        printf("\nI am a Child Process(Insertion Sort)\n");
        insertionSort(arr,n);
        printf("Sorted Array(Insertion Sort):\n");
        for(i=0;i<n;i++)
          printf("%d",arr[i]);
          printf("n");
    }
    else
    {
         printf("I am Parent Process(Bubble Sort\n");
         bubbleSort(arr,n);
         printf("Sorted Array(Bubble Sort):\n");
         for(    i=0;i<n;i++)
            printf("%d",arr[i]);
            printf("n");
            wait(NULL);
     }
     return 0;
}



#Q2
// Write a program to implement the shell.It should display the command prompt “myshell$”.
// Tokenize the command line and execute the given command by  creating the child process.

// Additionally it should interpret the following commands.

// myshell$  search f filename pattern :- To search first occurrence of the pattern in the file
// myshell$  search a filename pattern :- To search all the  occurrence of  pattern in the file.
// myshell$  search c filename pattern :- To count the number of occurrence  of  pattern in the  file.

#include <sys/types.h>
#include <sys/stat.h>
#include <fcntl.h>
#include <stdio.h>
#include <stdlib.h>
#include <string.h>
#include <sys/wait.h>
#include <unistd.h>

void make_toks(char *s, char *tok[])
{
  int i = 0;
  char *p;
  p = strtok(s, " ");
  while (p != NULL)
  {
    tok[i++] = p;
    p = strtok(NULL, " ");
  }
  tok[i] = NULL;
}

void search(char *fn, char op, char *pattern)
{
  int fh, count = 0, i = 0, j = 0;
  char buff[255], c, *p;
  fh = open(fn, O_RDONLY);
  if (fh == -1)
  {
    printf("File %s Not Found\n", fn);
    return;
  }

  switch (op)
  {
  case 'f':
    while (read(fh, &c, 1))
    {
      buff[j] = c;
      j++;
      if (c == '\n')
      {
        buff[j] = '\0';
        j = 0;
        i++;
        if (strstr(buff, pattern))
        {
          printf("%d: %s\n", i, buff);
          break;
        }
      }
    }
    break;
  case 'c':
    while (read(fh, &c, 1))
    {
      buff[j++] = c;
      if (c == '\n')
      {
        buff[j] = '\0';
        j = 0;
        p = buff;
        while (p = strstr(p, pattern))
        {
          count++;
          p++;
        }
      }
    }
    printf("Total No.of Occurrences = %d\n", count);
    break;
  case 'a':
    while (read(fh, &c, 1))
    {
      buff[j++] = c;
      if (c == '\n')
      {
        buff[j] = '\0';
        j = 0;
        i++;
        if (strstr(buff, pattern))
          printf("%d: %s", i, buff);
      }
    }
  } 
  close(fh);
}

int main()
{
  char buff[80], *args[10];
  int pid;
  int status;
  while (1)
  {
    printf("myshell$ ");
    fflush(stdin);
    fgets(buff, 80, stdin);
    buff[strlen(buff) - 1] = '\0';
    make_toks(buff, args);
    if (strcmp(args[0], "search") == 0)
      search(args[3], args[1][0], args[2]);
    else
    {
      pid = fork();
      if (pid > 0)
        wait(&status);
      else
      {
        if (execvp(args[0], args) == -1)
          printf("Bad command.\n");
      }
    }
  }

  return 0;
}

